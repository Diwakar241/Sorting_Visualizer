// Table.js
import React, { useState,useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import "./Table.css";
 
function Table() {
  const navigate = useNavigate();
  const location = useLocation();
  const initialData = location.state?.data || [];
  const [data, setData] = useState(initialData);
  const [editableRows, setEditableRows] = useState({});
  const [updateSuccess, setUpdateSuccess] = useState(false);
  const [formData, setFormData] = useState({ binValue: "", extprocessor: "", throttlingPercentage: "" });
  const [showFormFields, setShowFormFields] = useState(false);

 //pagination logic 
  const [currentPage, setCurrentPage] = useState(0);
  const itemsPerPage =10; // Number of items per page
 
  useEffect(() => {
    fetchData();
  },[currentPage]); // Fetch data whenever currentPage changes
 
  const fetchData = async () => {
    try {
      const response = await axios.post('http://localhost:8080/api/users/binRouting',formData, {
        params:{
          page:currentPage,
          size: itemsPerPage
        }
      });
      setData(response.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };
//end
  const toggleFormFields = () => {
    setShowFormFields(true);
  };

  function refreshPage() {
    setFormData({ binValue: "", extprocessor: "", throttlingPercentage: "" });
    window.location.reload(false);
  }
 
  const handleFormInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };
 
  const handleFormSubmit = async (e) => {
    setEditableRows(false)
    e.preventDefault();
    try {
      const response= await axios.post('http://localhost:8080/api/users/binRouting',formData,{
        params:{
          page:currentPage,
          size: itemsPerPage
        }});
      // Simulating a POST request with formData
        // Simulated response from the POST API
      // Update data with response
      console.log("response.data"+response.data);
      setData(response.data);
      // Reset form data
    //  setFormData({ binValue: "", extprocessor: "", throttlingPercentage: "" });
      // Hide form fields
      setShowFormFields(false);
    } catch (error) {
      console.error('Error submitting form:', error);
    }
  };
 
  const toggleEditMode = (index) => {
    setEditableRows((prev) => ({
      ...prev,
      [index]: !prev[index]
    }));
  };
 
  const handleInputChange = (e, index, key) => {
    const newData = [...data];
    newData[index][key] = e.target.value;
    setData(newData);
  };
 
  const handleUpdate = async (index) => {
    try {
      // Here you would perform your PUT request to update the data
      // Example:
      const response = await axios.put('http://localhost:8080/api/users/binRouting', data[index]);
      // Handle response if needed
      const updatedData = [...data];
      updatedData[index] = { ...data[index] }; // Update the data
      setData(updatedData);
      setUpdateSuccess(true);
      setTimeout(() => setUpdateSuccess(false), 3000);
      toggleEditMode(index);
    } catch (error) {
      console.error('Error updating data:', error);
    }
  };

  const paginate = (pageNumber) => setCurrentPage(pageNumber);
 
  return (
    <>
      <div className="table_wrapper">
        <div className="table_wrapper_inner">
          <nav className="navbar">
            <ul>
            <li><a href="javascript:void(0)"  onClick={refreshPage}>Bin Routing üóëÔ∏è</a></li>
            <li><a href="javascript:void(0)"  onClick={() => navigate('/form')}>Add</a></li>
            <li><a href="javascript:void(0)"  onClick={() => navigate(-1)}>Back</a></li>
            </ul>
          </nav>
          <div className="heading">Bin&nbsp;Routing&nbsp;Dashboard</div>
          {updateSuccess && <div className="update-success">Updated successfully!</div>}
          <form className="form1" onSubmit={handleFormSubmit}>
            {showFormFields && (
              <div>
                <label className="lable1">Enter Bin Value :  </label>
                <input className="input1"
                  type="text"
                  name="binValue"
                  value={formData.binValue}
                  onChange={handleFormInputChange}
                  placeholder="Field 1"
                />
                <label className="lable1">Enter Extprocessor : </label>
                <input className="input1"
                  type="text"
                  name="extprocessor"
                  value={formData.extprocessor}
                  onChange={handleFormInputChange}
                  placeholder="Field 2"
                />
               <label className="lable1">Enter Throttling Percentage : </label>
                <input className="input1"
                  type="text"
                  name="throttlingPercentage"
                  value={formData.throttlingPercentage}
                  onChange={handleFormInputChange}
                  placeholder="Field 3"
                />
                <button type="submit">Search</button>
              </div>
            )}
            {!showFormFields && <button className="button1" onClick={toggleFormFields}>Filter</button>}
          </form>
          <table>
            <thead>
              <tr>
                <th>BIN_VALUE</th>
                <th>EXT_PROCESSOR</th>
                <th>IS_ACTIVE</th>
                <th>THROTTLING_PERCENTAGE</th>
                <th>ACTION</th>
              </tr>
            </thead>
            <tbody>
              {(data.content || data).map((item, index) => (
                <tr key={index}>
                  <td>
                    {editableRows[index] ? (
                      <input
                        type="text"
                        value={item.binValue}
                        onChange={(e) => handleInputChange(e, index, 'binValue')}
                      />
                    ) : (
                      item.binValue
                    )}
                  </td>
                  <td>
                    {editableRows[index] ? (
                      <input
                        type="text"
                        value={item.extprocessor}
                        onChange={(e) => handleInputChange(e, index, 'extprocessor')}
                      />
                    ) : (
                      item.extprocessor
                    )}
                  </td>
                  <td>
                    {editableRows[index] ? (
                      <input
                        type="text"
                        value={item.isActive}
                        onChange={(e) => handleInputChange(e, index, 'isActive')}
                      />
                    ) : (
                      item.isActive
                    )}
                  </td>
                  <td>
                    {editableRows[index] ? (
                      <input
                        type="text"
                        value={item.throttlingPercentage}
                        onChange={(e) => handleInputChange(e, index, 'throttlingPercentage')}
                      />
                    ) : (
                      item.throttlingPercentage
                    )}
                  </td>
                  <td>
                    {editableRows[index] ? (
                      <button className="update" onClick={() => handleUpdate(index)}>Update</button>
                    ) : (
                      <button className="edit" onClick={() => toggleEditMode(index)}>Edit</button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <div className="pagination">
          <ul>
            {data.totalElements > itemsPerPage &&
              Array.from({ length: Math.ceil(data.totalElements/ itemsPerPage) }).map((_, index) => (
                <li key={index} className={`page-item ${currentPage === index + 1 ? 'active' : ''}`}>
                  <a onClick={() => paginate(index + 1)} href="javascript:void(0)">
                    {index + 1}
                  </a>
                </li>
              ))}
          </ul>
          </div>
        </div>
      </div>
    </>
  );
}
 
export default Table;
